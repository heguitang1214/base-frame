<?xml version="1.0" encoding="UTF-8" ?>

<!--
debug：当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。
scan：当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true
scanPeriod：设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。
新的logback没有[configuration][appender][encoding]层级
-->
<configuration>

    <!-- property 标签：属性配置标签，将公共的属性抽离出来
        定义日志文件的存储地址，勿在 LogBack 的配置中使用相对路径
     -->
    <property name="LOG_HOME" value="D:/log"/>
    <property name="APP_NAME" value="base-pro"/>
    <!--读取配置文件-->
    <!--<property resource="properties/${spring.profiles.active:-local}/project.change.properties"/>-->
    <!--使用配置文件的key-->
    <!--<contextName>${project.id}</contextName>-->
    <!--获取时间戳字符串-->
    <timestamp key="bySecond" datePattern="yyyy-MM-dd HH:mm:ss"/>


    <!--控制台输出,日志级别不同的颜色-->
    <appender name="CONSOLE_COLOUR" class="ch.qos.logback.core.ConsoleAppender">
        <!--<withJansi>true</withJansi>-->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符-->
            <pattern>[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%thread] %highlight([%-5level] %logger{50} - %msg%n)</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!--控制台日志，配置颜色，方式二-->
    <appender name="CONSOLE_COLOUR_TWO" class="ch.qos.logback.core.ConsoleAppender">
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>INFO</level>
        </filter>
        <withJansi>true</withJansi>
        <encoder>
            <!--<pattern>%d %p (%file:%line\)- %m%n</pattern>-->
            <!--格式化输出：%d:表示日期    %thread:表示线程名     %-5level:级别从左显示5个字符宽度  %msg:日志消息    %n:是换行符-->
            <pattern>%red(%d{yyyy-MM-dd HH:mm:ss}) %green([%thread]) %highlight(%-5level) %boldMagenta(%logger) -
                %cyan(%msg%n)
            </pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!--控制台输出,过滤标记为marker的信息输出到控制台-->
    <appender name="CONSOLE_MARKER" class="ch.qos.logback.core.ConsoleAppender">
        <layout class="ch.qos.logback.classic.PatternLayout">
            <pattern>[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%thread] [%-5level] [%logger{40}:%line] - %msg%n</pattern>
        </layout>
        <filter class="ch.qos.logback.core.filter.EvaluatorFilter">
            <evaluator class="ch.qos.logback.classic.boolex.OnMarkerEvaluator">
                <!-- 标记 -->
                <marker>time</marker>
            </evaluator>
            <onMismatch>DENY</onMismatch>
            <onMatch>ACCEPT</onMatch>
        </filter>
    </appender>


    <!--
        日志过滤，将ERROR级别的日志打印到对应的info.log文件中，其实现类是ThresholdFilter 和 LevelFilter，可以知道，
        其过滤的方式是：当日志级别大于等于配置的级别时返回 NEUTRAL，继续调用过滤器链上的下一个过滤器；否则，返回 DENY 直接拒绝记录日志。
        也就是说大于等于（warn、error...）info级别的日志都会记录到info.log文件中
     -->
    <appender name="FILE_INFO_FILTER" class="ch.qos.logback.core.FileAppender">
        <File>${LOG_HOME}/${APP_NAME}_info.log</File>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>INFO</level>
            <!-- 表示接收 INFO 级别的日志-->
            <onMatch>ACCEPT</onMatch>
            <!-- 表示除了 INFO 级别都不记录-->
            <onMismatch>DENY</onMismatch>
        </filter>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%thread] [%-5level] [%logger{40}:%line] - %msg%n</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>


    <appender name="FILE" class="ch.qos.logback.core.FileAppender">
        <File>${LOG_HOME}/${APP_NAME}_log.log</File>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%thread] [%-5level] [%logger{40}:%line] - %msg%n</pattern>
        </encoder>
    </appender>

    <!-- 按照每天生成日志文件，自动打印，不需要在 root、logger标签中配置 -->
<!--    <appender name="FILE_EVERYDAY" class="ch.qos.logback.core.rolling.RollingFileAppender">-->
<!--        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">-->
<!--            &lt;!&ndash;日志文件输出的文件名，拼接时间&ndash;&gt;-->
<!--            <FileNamePattern>${LOG_HOME}/myApp.log.%d{yyyy-MM-dd}.log</FileNamePattern>-->
<!--            &lt;!&ndash;日志最多保存多少天&ndash;&gt;-->
<!--            <MaxHistory>7</MaxHistory>-->
<!--        </rollingPolicy>-->
<!--        <layout class="ch.qos.logback.classic.PatternLayout">-->
<!--            &lt;!&ndash;格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符&ndash;&gt;-->
<!--            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>-->
<!--        </layout>-->
<!--        &lt;!&ndash;日志文件最大的大小&ndash;&gt;-->
<!--        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">-->
<!--            <MaxFileSize>10MB</MaxFileSize>-->
<!--        </triggeringPolicy>-->
<!--    </appender>-->


    <!-- 文件日志肯定需要按时间和日期进行分割和归档处理，这里的版本不使用 -->
<!--    <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">-->
<!--        &lt;!&ndash;日志文件保留天数&ndash;&gt;-->
<!--        <MaxHistory>30</MaxHistory>-->
<!--        &lt;!&ndash;日志文件最大的大小&ndash;&gt;-->
<!--        <MaxFileSize>100MB</MaxFileSize>-->
<!--        &lt;!&ndash;日志整体最大-->
<!--         可选的totalSizeCap属性控制所有归档文件的总大小。当超过总大小上限时，将异步删除最旧的存档。-->
<!--         totalSizeCap属性也需要设置maxHistory属性。此外，“最大历史”限制总是首先应用，“总大小上限”限制其次应用。-->
<!--         &ndash;&gt;-->
<!--        <totalSizeCap>10GB</totalSizeCap>-->
<!--    </rollingPolicy>-->

    <!-- 异步记录日志 -->
    <appender name="ASYNCFILE" class="ch.qos.logback.classic.AsyncAppender">
        <appender-ref ref="FILE"/>
    </appender>


    <!--抽离Controller的日志-->
    <appender name="CONTROLLER"  class="ch.qos.logback.core.rolling.RollingFileAppender">
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--日志文件输出的文件名-->
            <FileNamePattern>${LOG_HOME}/${APP_NAME}_controller.log.%d{yyyy-MM-dd}.log</FileNamePattern>
            <!--日志最多保存多少天-->
            <MaxHistory>7</MaxHistory>
        </rollingPolicy>
        <layout class="ch.qos.logback.classic.PatternLayout">
            <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符-->
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>
        </layout>
        <!--日志文件最大的大小-->
        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <MaxFileSize>10MB</MaxFileSize>
        </triggeringPolicy>
    </appender>


    <!--
        用来设置某一个包或者具体的某一个类的日志打印级别、以及指定<appender>。
        <logger>仅有一个name属性，一个可选的level和一个可选的addtivity属性。
            name：用来指定受此 logger 约束的某一个包或者具体的某一个类。
            level：用来设置打印级别（日志级别）TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF
            additivity：是否向上级loger传递打印信息。默认是true（具有继承关系）。
            如果将additivity设置为true，日志打印了两次，因为打印信息向上级传递，logger本身打印一次，root接到后又打印一次。
    -->
<!--    <logger name="com.tang.project" level="DEBUG" additivity="false">-->
<!--        <appender-ref ref="FILE"/>-->
<!--    </logger>-->

    <root level="INFO">
        <appender-ref ref="CONSOLE_COLOUR"/>
        <appender-ref ref="ASYNCFILE"/>
    </root>


    <!--日志异步到数据库-->
<!--    <appender name="DB" class="ch.qos.logback.classic.db.DBAppender">-->
<!--        &lt;!&ndash;日志异步到数据库 &ndash;&gt;-->
<!--        <connectionSource class="ch.qos.logback.core.db.DriverManagerConnectionSource">-->
<!--            &lt;!&ndash;连接池 &ndash;&gt;-->
<!--            <dataSource class="com.mchange.v2.c3p0.ComboPooledDataSource">-->
<!--                <driverClass>com.mysql.jdbc.Driver</driverClass>-->
<!--                <url>jdbc:mysql://127.0.0.1:3306/databaseName</url>-->
<!--                <user>root</user>-->
<!--                <password>root</password>-->
<!--            </dataSource>-->
<!--        </connectionSource>-->
<!--    </appender>-->

</configuration>